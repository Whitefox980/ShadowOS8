import json
from datetime import datetime
from pathlib import Path
from glob import glob

def safe_load_latest(pattern):
    files = sorted(glob(pattern), key=os.path.getmtime, reverse=True)
    if not files:
        return None
    with open(files[0]) as f:
        return f.read()

launcher_file = sorted(glob("reports/launcher_ai_*.json"), key=os.path.getmtime, reverse=True)[0]
with open(launcher_file) as f:
    data = json.load(f)

black_text = safe_load_latest("reports/black_advisor_*.txt")
white_text = safe_load_latest("reports/white_advisor_*.txt")

ts = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
out_path = f"reports/poc_shadowfox_{ts.replace(':', '').replace(' ', '_')}.md"

top_payloads = sorted(data, key=lambda x: x.get("length", 0), reverse=True)[:5]

lines = [
    "# ShadowFox PoC Report",
    f"**Date:** {ts}",
    "\n## Top Payloads Tested:\n"
]

for p in top_payloads:
    lines.append(f"- `{p['payload']}`\n  - Mode: `{p.get('mode', 'query')}`\n  - Status: `{p['status_code']}`\n  - Response Size: `{p['length']} bytes`\n")

if black_text:
    lines += ["\n---\n", "## AI-Based Exploitation Strategy\n", black_text.strip()]
if white_text:
    lines += ["\n---\n", "## AI-Based Mitigation Recommendations\n", white_text.strip()]

lines += [
    "\n---\n",
    "_This report was automatically generated by the ShadowFox OS8 security testing framework._"
]


# ... prethodni kod ...

import hashlib

signature_raw = f"ShadowFox-OS8::{ts}"
signature_hash = hashlib.sha256(signature_raw.encode()).hexdigest()

lines += [
    "\n---\n",
    "_This report was automatically generated by the ShadowFox OS8 security testing framework._",
    f"\n\n**Signature:** `{signature_hash}`"
]

Path("reports").mkdir(exist_ok=True)
with open(out_path, "w") as f:
    f.write("\n".join(lines))

print(f"\n[âœ“] PoC report generated: {out_path}")
